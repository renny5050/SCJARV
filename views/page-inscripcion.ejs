<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario de Inscripción Escolar</title>
    <link href="<%= '../css/bootstrap.min.css' %>" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="<%= '/css/layoutStyles.css' %>">
</head>
<body>
    <!-- Botón para mostrar/ocultar sidebar en móviles -->
    <button class="btn btn-primary toggle-btn" id="sidebarToggle">
        <i class="bi bi-list"></i>
    </button>
    
    <!-- Sidebar -->
    <%- include('partials/partial-sidebar') %>
    
    <!-- Header -->
    <%- include('partials/partial-header') %>
    
    <!-- Contenido principal -->
    <main id="content">
        <!-- Cambia el método a POST y añade la acción -->
        <form id="inscriptionForm" method="POST" action="/inscripcion">
            <!-- Sección 1: Datos del Estudiante -->
            <%- include('partials/partial-info-estudiante') %>
            
            <!-- Sección 2: Representante Legal -->
            <%- include('partials/partial-info-representante') %>
            
            <!-- Sección 3: Datos de los Padres -->
            <%- include('partials/partial-info-padres') %>
            
            <!-- Sección 4: Contacto de Emergencia -->
            <%- include('partials/partial-info-emergencia') %>

            
            <!-- Sección 5: Ambiente Socio Familiar -->
            <%- include('partials/partial-info-sociofam') %>

            <!-- Sección 6: Antecedentes prenatales -->
            <%- include('partials/partial-info-medica') %>

            <!-- Botón de envío -->
            
                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-success btn-lg mt-5">
                        <i class="bi bi-save me-2"></i> Guardar Inscripción
                    </button>
                </div>
            
        </form>
    </main>

    <!-- Formulario mínimo de prueba -->

<script src="<%= '../js/bootstrap.bundle.min.js' %>"></script>    <!-- Elimina la referencia al JavaScript si no es necesario -->

 <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Datos de estados y municipios de Venezuela
        const estadosMunicipios = {
            "Amazonas": ["Alto Orinoco", "Atabapo", "Atures", "Autana", "Manapiare", "Maroa", "Río Negro"],
            "Anzoátegui": ["Anaco", "Aragua", "Diego Bautista Urbaneja", "Fernando de Peñalver", "Francisco del Carmen Carvajal", "Francisco de Miranda", "Guanta", "Independencia", "José Gregorio Monagas", "Juan Antonio Sotillo", "Juan Manuel Cajigal", "Libertad", "Manuel Ezequiel Bruzual", "Pedro María Freites", "Píritu", "San José de Guanipa", "San Juan de Capistrano", "Santa Ana", "Simón Bolívar", "Simón Rodríguez"],
            "Apure": ["Achaguas", "Biruaca", "Muñóz", "Páez", "Pedro Camejo", "Rómulo Gallegos", "San Fernando"],
            "Aragua": ["Bolívar", "Camatagua", "Francisco Linares Alcántara", "Girardot", "José Ángel Lamas", "José Félix Ribas", "José Rafael Revenga", "Libertador", "Mario Briceño Iragorry", "Ocumare de la Costa de Oro", "San Casimiro", "San Sebastián", "Santiago Mariño", "Santos Michelena", "Sucre", "Tovar", "Urdaneta", "Zamora"],
            "Barinas": ["Alberto Arvelo Torrealba", "Andrés Eloy Blanco", "Antonio José de Sucre", "Arismendi", "Barinas", "Bolívar", "Cruz Paredes", "Ezequiel Zamora", "Obispos", "Pedraza", "Rojas", "Sosa"],
            "Bolívar": ["Caroní", "Cedeño", "El Callao", "Gran Sabana", "Heres", "Piar", "Angostura (Raúl Leoni)", "Roscio", "Sifontes", "Sucre", "Padre Pedro Chien"],
            "Carabobo": ["Bejuma", "Carlos Arvelo", "Diego Ibarra", "Guacara", "Juan José Mora", "Libertador", "Los Guayos", "Miranda", "Montalbán", "Naguanagua", "Puerto Cabello", "San Diego", "San Joaquín", "Valencia"],
            "Cojedes": ["Anzoátegui", "El Baúl", "Falcón", "Girardot", "Lima Blanco", "Pao de San Juan Bautista", "Ricaurte", "Rómulo Gallegos", "San Carlos", "Tinaco"],
            "Delta Amacuro": ["Antonio Díaz", "Casacoima", "Pedernales", "Tucupita"],
            "Distrito Capital": ["Libertador"],
            "Falcón": ["Acosta", "Bolívar", "Buchivacoa", "Cacique Manaure", "Carirubana", "Colina", "Dabajuro", "Democracia", "Falcón", "Federación", "Jacura", "Los Taques", "Mauroa", "Miranda", "Monseñor Iturriza", "Palmasola", "Petit", "Píritu", "San Francisco", "Silva", "Sucre", "Tocópero", "Unión", "Urumaco", "Zamora"],
            "Guárico": ["Camaguán", "Chaguaramas", "El Socorro", "Francisco de Miranda", "José Félix Ribas", "José Tadeo Monagas", "Juan Germán Roscio", "Julián Mellado", "Las Mercedes", "Leonardo Infante", "Pedro Zaraza", "Ortíz", "San Gerónimo de Guayabal", "San José de Guaribe", "Santa María de Ipire"],
            "Lara": ["Andrés Eloy Blanco", "Crespo", "Iribarren", "Jiménez", "Morán", "Palavecino", "Simón Planas", "Torres", "Urdaneta"],
            "Mérida": ["Alberto Adriani", "Andrés Bello", "Antonio Pinto Salinas", "Aricagua", "Arzobispo Chacón", "Campo Elías", "Caracciolo Parra Olmedo", "Cardenal Quintero", "Guaraque", "Julio César Salas", "Justo Briceño", "Libertador", "Miranda", "Obispo Ramos de Lora", "Padre Noguera", "Pueblo Llano", "Rangel", "Rivas Dávila", "Santos Marquina", "Sucre", "Tovar", "Tulio Febres Cordero", "Zea"],
            "Miranda": ["Acevedo", "Andrés Bello", "Baruta", "Brión", "Buroz", "Carrizal", "Chacao", "Cristóbal Rojas", "El Hatillo", "Guaicaipuro", "Independencia", "Lander", "Los Salias", "Páez", "Paz Castillo", "Pedro Gual", "Plaza", "Simón Bolívar", "Sucre", "Urdaneta", "Zamora"],
            "Monagas": ["Acosta", "Aguasay", "Bolívar", "Caripe", "Cedeño", "Ezequiel Zamora", "Libertador", "Maturín", "Piar", "Punceres", "Santa Bárbara", "Sotillo", "Uracoa"],
            "Nueva Esparta": ["Antolín del Campo", "Arismendi", "Díaz", "García", "Gómez", "Maneiro", "Marcano", "Mariño", "Península de Macanao", "Tubores", "Villalba"],
            "Portuguesa": ["Agua Blanca", "Araure", "Esteller", "Guanare", "Guanarito", "Monseñor José Vicente de Unda", "Ospino", "Páez", "Papelón", "San Genaro de Boconoíto", "San Rafael de Onoto", "Santa Rosalía", "Sucre", "Turén"],
            "Sucre": ["Andrés Eloy Blanco", "Andrés Mata", "Arismendi", "Benítez", "Bermúdez", "Bolívar", "Cajigal", "Cruz Salmerón Acosta", "Libertador", "Mariño", "Mejía", "Montes", "Ribero", "Sucre", "Valdéz"],
            "Táchira": ["Andrés Bello", "Antonio Rómulo Costa", "Ayacucho", "Bolívar", "Cárdenas", "Córdoba", "Fernández Feo", "Francisco de Miranda", "García de Hevia", "Guásimos", "Independencia", "Jáuregui", "José María Vargas", "Junín", "Libertad", "Libertador", "Lobatera", "Michelena", "Panamericano", "Pedro María Ureña", "Rafael Urdaneta", "Samuel Darío Maldonado", "San Cristóbal", "San Judas Tadeo", "Seboruco", "Simón Rodríguez", "Sucre", "Torbes", "Uribante"],
            "Trujillo": ["Andrés Bello", "Bocono", "Bolívar", "Candelaria", "Carache", "Escuque", "José Felipe Márquez Cañizales", "Juan Vicente Campo Elías", "La Ceiba", "Miranda", "Monte Carmelo", "Motatán", "Pampán", "Pampanito", "Rafael Rangel", "San Rafael de Carvajal", "Sucre", "Trujillo", "Urdaneta", "Valera"],
            "Vargas": ["Vargas"],
            "Yaracuy": ["Aristides Bastidas", "Bolívar", "Bruzual", "Cocorote", "Independencia", "José Antonio Páez", "La Trinidad", "Manuel Monge", "Nirgua", "Peña", "San Felipe", "Sucre", "Urachiche", "Veroes"],
            "Zulia": ["Almirante Padilla", "Baralt", "Cabimas", "Catatumbo", "Colón", "Francisco Javier Pulgar", "Jesús Enrique Lossada", "Jesús María Semprún", "La Cañada de Urdaneta", "Lagunillas", "Machiques de Perijá", "Mara", "Maracaibo", "Miranda", "Páez", "Rosario de Perijá", "San Francisco", "Santa Rita", "Simón Bolívar", "Sucre", "Valmore Rodríguez"]
        };
        
        // Referencias a los elementos
        const estadoSelect = document.getElementById('estado-nacimiento');
        const municipioSelect = document.getElementById('municipio-nacimiento');
        const nacionalidadSelect = document.getElementById('nacionalidad');

        // Llenar el dropdown de estados
        for (const estado in estadosMunicipios) {
            const option = document.createElement('option');
            option.value = estado;
            option.textContent = estado;
            estadoSelect.appendChild(option);
        }

        // Evento al cambiar el estado
        estadoSelect.addEventListener('change', function() {
            // Limpiar dropdown de municipios
            municipioSelect.innerHTML = '<option value="">Seleccione un municipio</option>';
            
            if (this.value) {
                // Habilitar dropdown de municipios
                municipioSelect.disabled = false;
                
                // Obtener municipios del estado seleccionado
                const municipios = estadosMunicipios[this.value];
                municipios.forEach(municipio => {
                    const option = document.createElement('option');
                    option.value = municipio;
                    option.textContent = municipio;
                    municipioSelect.appendChild(option);
                });
            } else {
                // Deshabilitar dropdown si no se selecciona un estado
                municipioSelect.disabled = true;
            }
        });

        // Configuración de fechas
        const today = new Date();
        
        // Edad mínima 3 años, máxima 6 años
        const minDateStudent = new Date(today.getFullYear() - 6, today.getMonth(), today.getDate());
        const maxDateStudent = new Date(today.getFullYear() - 3, today.getMonth(), today.getDate());
        const maxDateAdult = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
        
        // Establecer límites para fecha de nacimiento
        const fechaNacInput = document.getElementById('fecha_nacimiento');
        fechaNacInput.min = minDateStudent.toISOString().split('T')[0];
        fechaNacInput.max = maxDateStudent.toISOString().split('T')[0];
        
        // Actualizar texto de ayuda
        const helpText = fechaNacInput.nextElementSibling;
        if (helpText) {
            helpText.textContent = 'Debe tener entre 3 y 6 años';
        }
        
        // Configurar fechas para adultos
        document.getElementById('rep_fecha_nacimiento').max = maxDateAdult.toISOString().split('T')[0];
        document.getElementById('madre_fecha_nacimiento').max = maxDateAdult.toISOString().split('T')[0];
        document.getElementById('padre_fecha_nacimiento').max = maxDateAdult.toISOString().split('T')[0];
        
        // Fecha de inscripción automática
        const formattedToday = today.toISOString().split('T')[0];
        document.getElementById('fecha_inscripcion').value = formattedToday;
        document.getElementById('fecha-inscripcion-text').textContent = formattedToday;
        
        // Mapeo de campos entre representante y madre/padre
        const camposEquivalencia = {
            'rep_primer_nombr': ['madre_primer_nombr', 'padre_primer_nombr'],
            'rep_segundo_nomb': ['madre_segundo_nomb', 'padre_segundo_nomb'],
            'rep_primer_apell': ['madre_primer_apell', 'padre_primer_apell'],
            'rep_segund_apell': ['madre_segundo_apell', 'padre_segundo_apell'],
            'rep_cedula': ['madre_cedula', 'padre_cedula'],
            'rep_fecha_nacimiento': ['madre_fecha_nacimiento', 'padre_fecha_nacimiento'],
            'rep_telefono': ['madre_telefono', 'padre_telefono'],
            'rep_direccion': ['madre_direccion', 'padre_direccion'],
            'rep_email': ['madre_correo', 'padre_correo']
        };
        
        // Función para habilitar/deshabilitar campos de madre/padre
        function toggleParentFields(parentType, enable) {
            const prefix = parentType === 'madre' ? 'madre_' : 'padre_';
            // Excluir ocupación de los campos a deshabilitar
            const fields = [
                `${prefix}primer_nombr`, `${prefix}segundo_nomb`, 
                `${prefix}primer_apell`, `${prefix}segundo_apell`,
                `${prefix}cedula`, `${prefix}nacionalidad`, 
                `${prefix}fecha_nacimiento`, `${prefix}estado_civil`,
                `${prefix}direccion`,
                `${prefix}telefono`, `${prefix}correo`
            ];
            
            fields.forEach(fieldName => {
                const field = document.getElementsByName(fieldName)[0];
                if (field) {
                    // Usar readOnly en lugar de disabled
                    field.readOnly = !enable;
                    field.required = enable;
                    
                    // Actualizar apariencia visual
                    if (enable) {
                        field.classList.remove('bg-light');
                    } else {
                        field.classList.add('bg-light');
                    }
                }
            });
            
            // Mantener ocupación siempre habilitada
            const ocupacionField = document.getElementsByName(`${prefix}ocupacion`)[0];
            if (ocupacionField) {
                ocupacionField.readOnly = false;
                ocupacionField.classList.remove('bg-light');
            }
        }
        
        // Función para copiar datos de representante a madre/padre
        function copiarDatosARepresentado(parentType) {
            Object.keys(camposEquivalencia).forEach(repField => {
                const repElement = document.getElementsByName(repField)[0];
                if (!repElement || !repElement.value) return;
                
                const parentField = camposEquivalencia[repField][parentType === 'madre' ? 0 : 1];
                const parentElement = document.getElementsByName(parentField)[0];
                
                if (parentElement) {
                    parentElement.value = repElement.value;
                    // Para campos de fecha, establecer el valor máximo
                    if (repField === 'rep_fecha_nacimiento') {
                        parentElement.max = repElement.max;
                    }
                }
            });
        }
        
        // Selector de representante (madre/padre/otro)
        const representanteEs = document.getElementById('representanteEs');
        
        // Evento al cambiar la selección del representante
        if (representanteEs) {
            representanteEs.addEventListener('change', function() {
                const valor = this.value;
                
                // Habilitar todos los campos primero
                toggleParentFields('madre', true);
                toggleParentFields('padre', true);
                
                if (valor === 'madre') {
                    // Copiar datos a madre
                    copiarDatosARepresentado('madre');
                    // Hacer campos de madre solo lectura (excepto ocupación)
                    toggleParentFields('madre', false);
                } 
                else if (valor === 'padre') {
                    // Copiar datos a padre
                    copiarDatosARepresentado('padre');
                    // Hacer campos de padre solo lectura (excepto ocupación)
                    toggleParentFields('padre', false);
                }
            });
        }
        
        // Toggle sidebar en móviles
        const sidebarToggle = document.getElementById('sidebarToggle');
        const sidebar = document.getElementById('sidebar');
        const content = document.getElementById('content');
        
        sidebarToggle.addEventListener('click', function() {
            sidebar.classList.toggle('visible');
            content.classList.toggle('content-expanded');
        });

        
    });
    </script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Configuración inicial de fechas
    const today = new Date();
    const minDateStudent = new Date(today.getFullYear() - 6, today.getMonth(), today.getDate());
    const maxDateStudent = new Date(today.getFullYear() - 3, today.getMonth(), today.getDate());
    const maxDateAdult = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
    
    // Establecer límites para fecha de nacimiento del estudiante
    const fechaNacInput = document.getElementById('fecha_nacimiento');
    if (fechaNacInput) {
        fechaNacInput.min = minDateStudent.toISOString().split('T')[0];
        fechaNacInput.max = maxDateStudent.toISOString().split('T')[0];
        
        // Actualizar texto de ayuda
        const helpText = fechaNacInput.nextElementSibling;
        if (helpText && helpText.classList.contains('text-muted')) {
            helpText.textContent = 'Debe tener entre 3 y 6 años';
        }
    }
    
    // Configurar fechas para adultos
    const repFechaInput = document.getElementById('rep_fecha_nacimiento');
    const madreFechaInput = document.getElementById('madre_fecha_nacimiento');
    const padreFechaInput = document.getElementById('padre_fecha_nacimiento');
    
    if (repFechaInput) repFechaInput.max = maxDateAdult.toISOString().split('T')[0];
    if (madreFechaInput) madreFechaInput.max = maxDateAdult.toISOString().split('T')[0];
    if (padreFechaInput) padreFechaInput.max = maxDateAdult.toISOString().split('T')[0];
    
    // Fecha de inscripción automática
    const fechaInscripcionInput = document.getElementById('fecha_inscripcion');
    const fechaInscripcionText = document.getElementById('fecha-inscripcion-text');
    if (fechaInscripcionInput && fechaInscripcionText) {
        const formattedToday = today.toISOString().split('T')[0];
        fechaInscripcionInput.value = formattedToday;
        fechaInscripcionText.textContent = formattedToday;
    }
    
    // Función para sanitizar inputs
    const sanitizeInput = (value) => {
        return value.replace(/<[^>]*>/g, '').trim();
    };
    
    // Validadores específicos
    const validators = {
        soloLetras: (value) => /^[A-Za-záéíóúñÁÉÍÓÚÑ\s]{2,50}$/.test(value),
        cedula: (value) => /^\d{6,8}$/.test(value),
        telefono: (value) => /^(\+58|0)\d{3}-\d{7}$/.test(value),
        email: (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value),
        pesoActual: (value) => !value || (value >= 10 && value <= 30),
        tallaActual: (value) => !value || (value >= 50 && value <= 130),
        pesoNacimiento: (value) => !value || (value >= 0.5 && value <= 6),
        tallaNacimiento: (value) => !value || (value >= 30 && value <= 60),
        edadMadreParto: (value) => !value || (value >= 10 && value <= 60),
        edadHablar: (value) => !value || (value >= 0 && value <= 60),
        edadCaminar: (value) => !value || (value >= 0 && value <= 24),
        edadEmergencia: (value) => value >= 18
    };
    
    // Configuración de validación por campo
    const fieldValidations = {
        // ===== DATOS DEL ESTUDIANTE =====
        'primer_nombr': { validator: validators.soloLetras, msg: 'Solo letras (2-50 caracteres)' },
        'segundo_nomb': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'primer_apell': { validator: validators.soloLetras, msg: 'Solo letras (2-50 caracteres)' },
        'segundo_apellido': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'peso_kg': { validator: validators.pesoActual, msg: 'Entre 10-30 kg' },
        'tall_cm': { validator: validators.tallaActual, msg: 'Entre 50-130 cm' },
        
        // ===== REPRESENTANTE LEGAL =====
        'rep_primer_nombr': { validator: validators.soloLetras, msg: 'Solo letras (2-50 caracteres)' },
        'rep_segundo_nomb': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'rep_primer_apell': { validator: validators.soloLetras, msg: 'Solo letras (2-50 caracteres)' },
        'rep_segund_apell': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'rep_cedula': { validator: validators.cedula, msg: 'Formato 1234567' },
        'rep_telefono': { validator: validators.telefono, msg: 'Formato 0412-1234567' },
        'rep_email': { validator: validators.email, msg: 'Email inválido' },
        
        // ===== DATOS DE LA MADRE =====
        'madre_primer_nombr': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'madre_segundo_nomb': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'madre_primer_apell': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'madre_segundo_apell': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'madre_cedula': { validator: value => !value || validators.cedula(value), msg: 'Formato 1234567' },
        'madre_telefono': { validator: value => !value || validators.telefono(value), msg: 'Formato 0412-1234567' },
        'madre_correo': { validator: value => !value || validators.email(value), msg: 'Email inválido' },
        
        // ===== DATOS DEL PADRE =====
        'padre_primer_nombr': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'padre_segundo_nomb': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'padre_primer_apell': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'padre_segundo_apell': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'padre_cedula': { validator: value => !value || validators.cedula(value), msg: 'Formato 1234567' },
        'padre_telefono': { validator: value => !value || validators.telefono(value), msg: 'Formato 0412-1234567' },
        'padre_correo': { validator: value => !value || validators.email(value), msg: 'Email inválido' },
        
        // ===== CONTACTO DE EMERGENCIA =====
        'emer_primer_nombre': { validator: validators.soloLetras, msg: 'Solo letras (2-50 caracteres)' },
        'emer_segundo_nombre': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'emer_primer_apellido': { validator: validators.soloLetras, msg: 'Solo letras (2-50 caracteres)' },
        'emer_segundo_apellido': { validator: value => !value || validators.soloLetras(value), msg: 'Solo letras (2-50 caracteres)' },
        'emer_cedula': { validator: validators.cedula, msg: 'Formato 1234567' },
        'emer_telefono': { validator: validators.telefono, msg: 'Formato 0412-1234567' },
        'emer_edad': { validator: validators.edadEmergencia, msg: 'Mínimo 18 años' },
        
        // ===== ANTECEDENTES PRENATALES =====
        'edad_madre_parto': { validator: validators.edadMadreParto, msg: 'Entre 10-60 años' },
        'peso_nino': { validator: validators.pesoNacimiento, msg: 'Entre 0.5 y 6 Kg' },
        'talla_nino': { validator: validators.tallaNacimiento, msg: 'Entre 30-60 cm' },
        'edad_hablar': { validator: validators.edadHablar, msg: '0-60 meses' },
        'edad_caminar': { validator: validators.edadCaminar, msg: '0-24 meses' }
    };
    
    // Crear elementos de feedback si no existen
    document.querySelectorAll('input, select').forEach(field => {
        if (!field.name) return;
        
        if (!field.nextElementSibling || !field.nextElementSibling.classList.contains('invalid-feedback')) {
            const feedback = document.createElement('div');
            feedback.className = 'invalid-feedback';
            field.parentNode.appendChild(feedback);
        }
    });
    
    // Validación de campo individual
    function validateField(field) {
        const validation = fieldValidations[field.name];
        if (!validation) return true;
        
        let value;
        if (field.type === 'number') {
            value = field.value === '' ? null : parseFloat(field.value);
        } else {
            value = sanitizeInput(field.value);
        }
        
        // Si el campo no es requerido y está vacío, se considera válido
        if ((value === null || value === '') && !field.required) {
            field.classList.remove('is-invalid');
            field.classList.remove('is-valid');
            if (field.nextElementSibling) {
                field.nextElementSibling.textContent = '';
            }
            return true;
        }
        
        const isValid = validation.validator(value);
        if (!isValid) {
            field.classList.add('is-invalid');
            field.classList.remove('is-valid');
            if (field.nextElementSibling) {
                field.nextElementSibling.textContent = validation.msg;
            }
            return false;
        } else {
            field.classList.remove('is-invalid');
            field.classList.add('is-valid');
            if (field.nextElementSibling) {
                field.nextElementSibling.textContent = '';
            }
            return true;
        }
    }
    
    // Validación de fechas
    function validateDates() {
        let valid = true;
        const dateFields = [
            {id: 'fecha_nacimiento', minAge: 3, maxAge: 6},
            {id: 'rep_fecha_nacimiento', minAge: 18},
            {id: 'madre_fecha_nacimiento', minAge: 18},
            {id: 'padre_fecha_nacimiento', minAge: 18}
        ];
        
        dateFields.forEach(dateField => {
            const field = document.getElementsByName(dateField.id)[0];
            if (!field || !field.value) return;
            
            const birthDate = new Date(field.value);
            const today = new Date();
            let minDate = new Date(today.getFullYear() - dateField.minAge, today.getMonth(), today.getDate());
            let maxDate = null;
            
            if (dateField.maxAge) {
                maxDate = new Date(today.getFullYear() - dateField.maxAge, today.getMonth(), today.getDate());
            }
            
            let errorMessage = '';
            if (dateField.maxAge) {
                // Validar rango de edad (3-6 años)
                if (birthDate < maxDate || birthDate > minDate) {
                    errorMessage = `Debe tener entre ${dateField.minAge} y ${dateField.maxAge} años`;
                }
            } else {
                // Validar solo edad mínima
                if (birthDate > minDate) {
                    errorMessage = `Mínimo ${dateField.minAge} años`;
                }
            }
            
            if (errorMessage) {
                field.classList.add('is-invalid');
                if (field.nextElementSibling) {
                    field.nextElementSibling.textContent = errorMessage;
                }
                valid = false;
            } else {
                field.classList.remove('is-invalid');
                field.classList.add('is-valid');
            }
        });
        
        return valid;
    }
    
    // Validación de nombres en mayúsculas
    function formatNames() {
        document.querySelectorAll('input[name*="nombr"], input[name*="apell"]').forEach(field => {
            if (field.value) {
                field.value = sanitizeInput(field.value)
                    .toLowerCase()
                    .replace(/\b\w/g, c => c.toUpperCase());
            }
        });
    }
    
    // Validación completa del formulario
    function validateForm() {
        let isValid = true;
        
        // Validar todos los campos
        document.querySelectorAll('input, select').forEach(field => {
            if (field.name && !validateField(field)) {
                isValid = false;
            }
        });
        
        // Validar fechas
        if (!validateDates()) {
            isValid = false;
        }
        
        return isValid;
    }
    
    // Eventos de validación en tiempo real
    document.querySelectorAll('input, select').forEach(field => {
        if (!field.name) return;
        
        field.addEventListener('blur', function() {
            validateField(this);
        });
        
        // Validar números mientras se escriben
        if (field.type === 'number') {
            field.addEventListener('input', function() {
                validateField(this);
            });
        }
        
        // Validar nombres mientras se escriben
        if (field.name.includes('nombr') || field.name.includes('apell')) {
            field.addEventListener('input', function() {
                validateField(this);
            });
        }
    });
    
    // Validar al enviar el formulario
    const form = document.getElementById('inscriptionForm');
    if (form) {
        form.addEventListener('submit', function(e) {
            // Formatear nombres
            formatNames();
            
            // Validar formulario
            if (!validateForm()) {
                e.preventDefault();
                
                // Encontrar el primer campo inválido y desplazarse a él
                const firstInvalid = document.querySelector('.is-invalid');
                if (firstInvalid) {
                    firstInvalid.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center'
                    });
                    
                    // Enfocar el campo
                    setTimeout(() => {
                        firstInvalid.focus();
                    }, 1000);
                }
            }
        });
    }
    
    // Validación inicial para campos que podrían tener valores por defecto
    setTimeout(() => {
        document.querySelectorAll('input, select').forEach(field => {
            if (field.name && field.value) {
                validateField(field);
            }
        });
    }, 500);
});
</script>
</body>
</html>